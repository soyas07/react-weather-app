{"version":3,"sources":["component/Background.js","component/WeatherBg.js","component/Loading.js","component/Forecast.js","hooks/useForecast.js","component/WeatherApp.js","App.js","reportWebVitals.js","index.js"],"names":["Background","className","WeatherBg","Loading","Forecast","submitLocation","submitted","info","useState","location","setLocation","onSubmit","e","preventDefault","type","placeholder","onChange","target","value","useForecast","URL","isLoading","setLoading","error","setError","setInfo","refetch","console","log","axios","get","then","res","catch","err","finally","callApi","city","WeatherApp","submit","setSubmit","App","Fragment","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"oNASeA,MAPf,WACI,OACI,qBAAKC,UAAU,qBCKRC,MAPf,WACI,OACI,qBAAKD,UAAU,+BCMRE,MARf,WACI,OACI,qBAAKF,UAAU,oBC2BRG,MA7Bf,YAAyD,IAApCC,EAAmC,EAAnCA,eAAgBC,EAAmB,EAAnBA,UAEjC,GAFoD,EAARC,KAEZC,sBAAhC,mBAAOC,EAAP,KAAiBC,EAAjB,KAQA,OACI,sBAAKT,UAAU,qBAAf,UACI,qBAAIA,UAAWK,EAAY,aAAe,KAA1C,qBAAwD,0CACxD,sBAAML,UAAU,gBAAgBU,SATvB,SAAAC,GACbA,EAAEC,iBACe,OAAbJ,GACJJ,EAAeI,IAMX,SACI,uBAAOK,KAAK,OAAOC,YAAY,cAAcC,SAAU,SAAAJ,GAAC,OAAIF,EAAYE,EAAEK,OAAOC,QAAQA,MAAOT,MAEpG,sBAAKR,UAAWK,EAAY,mBAAqB,gBAAjD,UACI,oBAAIL,UAAU,iBAAd,qBACA,mDACA,qBAAKA,UAAU,2BAEf,qBAAIA,UAAU,iBAAd,eAAiC,wCACjC,qCACA,4D,gBCKDkB,MA3Bf,WACI,IAAMC,EAAM,kGAEZ,EAAgCZ,oBAAS,GAAzC,mBAAOa,EAAP,KAAkBC,EAAlB,KACA,EAA0Bd,qBAA1B,mBAAOe,EAAP,KAAcC,EAAd,KACA,EAAwBhB,qBAAxB,mBAAOD,EAAP,KAAakB,EAAb,KAmBA,MAAO,CAAEJ,YAAWE,QAAOhB,OAAMmB,QATjB,WACZC,QAAQC,IAAI,cACZN,GAAW,GACXO,IAAMC,IAAIV,GACTW,MAAK,SAAAC,GAAG,OAAIP,EAAQO,MACpBC,OAAM,SAAAC,GAAG,OAAIV,EAASU,MACtBC,SAAQ,kBAAMb,GAAW,OAGYc,QAjB1B,SAACC,GACbf,GAAW,GACXO,IAAMC,IAAIV,GACTW,MAAK,SAAAC,GAAG,OAAIP,EAAQO,MACpBC,OAAM,SAAAC,GAAG,OAAIV,EAASU,MACtBC,SAAQ,kBAAMb,GAAW,SCgBnBgB,MAxBf,WAEI,MAA4B9B,oBAAS,GAArC,mBAAO+B,EAAP,KAAeC,EAAf,KAEA,EAAqDrB,IAA7CE,EAAR,EAAQA,UAAWE,EAAnB,EAAmBA,MAAOhB,EAA1B,EAA0BA,KAAe6B,GAAzC,EAAgCV,QAAhC,EAAyCU,SAOzC,OAAGb,EACQ,6BAAKA,IAGZ,sBAAKtB,UAAU,gBAAf,UACM,cAAC,EAAD,CAAYM,KAAMA,IAClB,cAAC,EAAD,CAAWA,KAAMA,IAClBc,GAAa,cAAC,EAAD,KACZA,GAAa,cAAC,EAAD,CAAUhB,eAbhB,SAAAI,GACb+B,GAAU,GACVJ,EAAQ3B,IAW+CH,UAAWiC,EAAQhC,KAAMA,QCdzEkC,MARf,WACE,OACE,cAAC,IAAMC,SAAP,UACE,cAAC,EAAD,OCKSC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBd,MAAK,YAAkD,IAA/Ce,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCFdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.b3e4a606.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nfunction Background() {\r\n    return (\r\n        <div className=\"background dash\">\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Background\r\n","import React from 'react'\r\n\r\nfunction WeatherBg() {\r\n    return (\r\n        <div className='container-weather-bg dash'>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default WeatherBg\r\n","import React from 'react'\r\n\r\nfunction Loading() {\r\n    return (\r\n        <div className='container-load'>\r\n            \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Loading\r\n","import React, {useState} from 'react'\r\n\r\nfunction Forecast( { submitLocation, submitted, info} ) {\r\n\r\n    const [location, setLocation] = useState()\r\n\r\n    const onSubmit = e => {\r\n        e.preventDefault()\r\n        if (location === null) return\r\n        submitLocation(location)\r\n    }\r\n\r\n    return (\r\n        <div className='container-forecast'>\r\n            <h1 className={submitted ? \"hide-title\" : null}>Weather <span>App</span></h1>\r\n            <form className='forecast-form' onSubmit={onSubmit}>\r\n                <input type=\"text\" placeholder='Search City' onChange={e => setLocation(e.target.value)} value={location} />\r\n            </form>\r\n            <div className={submitted ? \"display-forecast\" : \"hide-forecast\"}>\r\n                <h1 className=\"forecast-title\">WEATHER</h1>\r\n                <h4>Sydney, Australia</h4>\r\n                <div className=\"forecast forecast-rain\">\r\n                </div>\r\n                <h1 className=\"forecast-title\">23<sup>oC</sup></h1>\r\n                <p>RAIN</p>\r\n                <p>01:34 PM, 12 DEC SUN</p>\r\n            </div>        \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Forecast\r\n","import axios from 'axios'\r\nimport { useState, useEffect } from 'react'\r\n\r\nfunction useForecast() {\r\n    const URL = 'https://api.openweathermap.org/data/2.5/weather?q=Sydney&appid=b17c52ecf93e5a256de3bf62785ce96f'\r\n\r\n    const [isLoading, setLoading] = useState(false)\r\n    const [error, setError] = useState()\r\n    const [info, setInfo] = useState()\r\n\r\n    const callApi = (city) => {\r\n        setLoading(true)\r\n        axios.get(URL)\r\n        .then(res => setInfo(res))\r\n        .catch(err => setError(err))\r\n        .finally(() => setLoading(false))\r\n    }\r\n\r\n    const refetch = () => {\r\n        console.log('refetching')\r\n        setLoading(true)\r\n        axios.get(URL)\r\n        .then(res => setInfo(res))\r\n        .catch(err => setError(err))\r\n        .finally(() => setLoading(false))\r\n    }\r\n\r\n    return { isLoading, error, info, refetch, callApi }\r\n}\r\n\r\nexport default useForecast","import React, { useState } from 'react'\r\nimport Background from './Background'\r\nimport WeatherBg from './WeatherBg'\r\nimport Loading from './Loading'\r\nimport Forecast from './Forecast'\r\nimport useForecast from '../hooks/useForecast'\r\n\r\nfunction WeatherApp() {\r\n\r\n    const [submit, setSubmit] = useState(false)\r\n\r\n    const { isLoading, error, info, refetch, callApi } = useForecast()\r\n\r\n    const onSubmit = location => {\r\n        setSubmit(true)\r\n        callApi(location)\r\n    }\r\n\r\n    if(error)\r\n        return <h1>{error}</h1>\r\n\r\n    return (\r\n        <div className='container-app'>\r\n            { <Background info={info} />}\r\n            { <WeatherBg info={info} />}\r\n            {isLoading && <Loading />}\r\n            {!isLoading && <Forecast submitLocation={onSubmit} submitted={submit} info={info} />}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default WeatherApp\r\n","import React from 'react';\nimport './css/App.css';\nimport WeatherApp from './component/WeatherApp';\n\nfunction App() {\n  return (\n    <React.Fragment>\n      <WeatherApp />\n    </React.Fragment>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}