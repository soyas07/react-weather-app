{"version":3,"sources":["component/Background.js","component/WeatherBg.js","component/Loading.js","component/Forecast.js","hooks/useForecast.js","component/WeatherApp.js","App.js","reportWebVitals.js","index.js"],"names":["Background","info","weather","className","WeatherBg","Loading","Forecast","submitLocation","submitted","useState","location","setLocation","dateTime","Date","onSubmit","e","preventDefault","type","placeholder","onChange","target","value","required","city","currentTemp","toLocaleString","hour","minute","hour12","timezone","useForecast","isLoading","setLoading","error","setError","setInfo","callApi","a","axios","get","then","res","data","name","Math","round","main","temp","catch","err","finally","WeatherApp","submit","setSubmit","App","Fragment","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"oNAYeA,MAVf,YAA+B,IAATC,EAAQ,EAARA,KAElB,MAAmB,SAAfA,EAAKC,QAAyB,qBAAKC,UAAU,oBAC9B,UAAfF,EAAKC,QAA0B,qBAAKC,UAAU,qBAC/B,iBAAfF,EAAKC,QAAiC,qBAAKC,UAAU,qBACtC,WAAfF,EAAKC,QAA2B,qBAAKC,UAAU,oBAC5C,qBAAKA,UAAU,qBCIXC,MAVf,YAA8B,IAATH,EAAQ,EAARA,KACjB,MAAmB,SAAfA,EAAKC,QAAyB,qBAAKC,UAAU,8BAC9B,UAAfF,EAAKC,QAA0B,qBAAKC,UAAU,+BAC/B,iBAAfF,EAAKC,QAAiC,qBAAKC,UAAU,+BACtC,WAAfF,EAAKC,QAA2B,qBAAKC,UAAU,8BAE/C,qBAAKA,UAAU,+BCERE,MARf,WACI,OACI,qBAAKF,UAAU,oBCmCRG,MArCf,YAAyD,IAApCC,EAAmC,EAAnCA,eAAgBC,EAAmB,EAAnBA,UAAWP,EAAQ,EAARA,KAE5C,EAAgCQ,qBAAhC,mBAAOC,EAAP,KAAiBC,EAAjB,KAYMC,EAAW,IAAIC,KAErB,OACI,sBAAKV,UAAU,qBAAf,UACI,qBAAIA,UAAWK,EAAY,aAAe,KAA1C,qBAAwD,0CACxD,sBAAML,UAAU,gBAAgBW,SAfvB,SAAAC,GACbA,EAAEC,iBACe,OAAbN,GACJH,EAAeG,IAYX,SACI,uBAAOO,KAAK,OAAOC,YAAY,cAAcC,SAAU,SAAAJ,GAAC,OAAIJ,EAAYI,EAAEK,OAAOC,QAAQA,MAAOX,EAAUY,UAAQ,MAEtH,sBAAKnB,UAAWK,EAAY,mBAAqB,gBAAjD,UACI,oBAAIL,UAAU,iBAAd,qBACA,6BAAKF,EAAKsB,OACO,SAAftB,EAAKC,SAAqB,qBAAKC,UAAU,2BAC1B,UAAfF,EAAKC,SAAsB,qBAAKC,UAAU,4BAC3B,iBAAfF,EAAKC,SAA6B,qBAAKC,UAAU,4BAClC,WAAfF,EAAKC,SAAuB,qBAAKC,UAAU,2BAC7C,qBAAIA,UAAU,iBAAd,UAAgCF,EAAKuB,YAAY,wCACjD,4BAAIvB,EAAKC,UACT,4BAAIU,EAASa,eAAe,QAAS,CAACC,KAAM,UAAWC,OAAQ,UAAWC,QAAQ,EAAMC,SAAU,iB,yCCPnGC,MAvBf,WAEI,MAAgCrB,oBAAS,GAAzC,mBAAOsB,EAAP,KAAkBC,EAAlB,KACA,EAA0BvB,qBAA1B,mBAAOwB,EAAP,KAAcC,EAAd,KACA,EAAwBzB,mBAAS,IAAjC,mBAAOR,EAAP,KAAakC,EAAb,KACA,EAAsC1B,qBAAtC,mBAEM2B,GAFN,UAEa,uCAAG,WAAOb,GAAP,SAAAc,EAAA,6DACZL,GAAW,GADC,SAENM,IAAMC,IAAN,4DAA+DhB,EAA/D,4CACLiB,MAAK,SAAAC,GAAQN,EAAQ,CAClBZ,KAAMkB,EAAIC,KAAKC,KACfnB,YAAaoB,KAAKC,MAAMJ,EAAIC,KAAKI,KAAKC,KAAO,QAC7C7C,QAASuC,EAAIC,KAAKxC,QAAQ,GAAG4C,KAC7BjB,SAAUY,EAAIC,KAAKb,cAEtBmB,OAAM,SAAAC,GAAG,OAAIf,EAASe,MACtBC,SAAQ,kBAAMlB,GAAW,MAVd,2CAAH,uDAab,MAAO,CAAED,YAAW9B,OAAMgC,QAAOG,YCStBe,MAzBf,WAEI,MAA4B1C,oBAAS,GAArC,mBAAO2C,EAAP,KAAeC,EAAf,KACA,EAAsC5C,qBAAtC,mBAEA,GAFA,UAE4CqB,KAApCC,EAAR,EAAQA,UAAW9B,EAAnB,EAAmBA,KAAMgC,EAAzB,EAAyBA,MAAOG,EAAhC,EAAgCA,QAOhC,OAAGH,EACQ,6BAAKA,IAGZ,sBAAK9B,UAAU,gBAAf,UACM,cAAC,EAAD,CAAYF,KAAMA,IAClB,cAAC,EAAD,CAAWA,KAAMA,IAClB8B,GAAa,cAAC,EAAD,KACZA,GAAa,cAAC,EAAD,CAAUxB,eAbhB,SAAAG,GACb2C,GAAU,GACVjB,EAAQ1B,IAW+CF,UAAW4C,EAAQnD,KAAMA,QCfzEqD,MARf,WACE,OACE,cAAC,IAAMC,SAAP,UACE,cAAC,EAAD,OCKSC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBlB,MAAK,YAAkD,IAA/CmB,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCFdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.d0b888fa.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nfunction Background( {info} ) {\r\n\r\n    if (info.weather==='Rain') return <div className='background rain'></div>\r\n    if (info.weather==='Clear') return <div className='background sunny'></div>\r\n    if (info.weather==='Thunderstorm') return <div className='background storm'></div>\r\n    if (info.weather==='Clouds') return <div className='background mist'></div>\r\n    return <div className=\"background dash\"></div>\r\n\r\n}\r\n\r\nexport default Background\r\n","import React from 'react'\r\n\r\nfunction WeatherBg( {info} ) {\r\n    if (info.weather==='Rain') return <div className='container-weather-bg rain'></div>\r\n    if (info.weather==='Clear') return <div className='container-weather-bg sunny'></div>\r\n    if (info.weather==='Thunderstorm') return <div className='container-weather-bg storm'></div>\r\n    if (info.weather==='Clouds') return <div className='container-weather-bg mist'></div>\r\n    return (\r\n        <div className='container-weather-bg dash'></div>\r\n    )\r\n}\r\n\r\nexport default WeatherBg\r\n","import React from 'react'\r\n\r\nfunction Loading() {\r\n    return (\r\n        <div className='container-load'>\r\n            \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Loading\r\n","import React, {useState} from 'react'\r\n\r\nfunction Forecast( { submitLocation, submitted, info} ) {\r\n\r\n    const [location, setLocation] = useState()\r\n\r\n    const onSubmit = e => {\r\n        e.preventDefault()\r\n        if (location === null) return\r\n        submitLocation(location)\r\n    }\r\n\r\n    const week = ['Sun', 'Mon', 'Tue', 'Wed', 'Thur', 'Fri', 'Sat']\r\n    const months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Sep', 'Oct', 'Nov', 'Dec']\r\n    const currentTime = ['am', 'pm']\r\n\r\n    const dateTime = new Date()\r\n\r\n    return (\r\n        <div className='container-forecast'>\r\n            <h1 className={submitted ? \"hide-title\" : null}>Weather <span>App</span></h1>\r\n            <form className='forecast-form' onSubmit={onSubmit}>\r\n                <input type=\"text\" placeholder='Search City' onChange={e => setLocation(e.target.value)} value={location} required />\r\n            </form>\r\n            <div className={submitted ? \"display-forecast\" : \"hide-forecast\"}>\r\n                <h1 className=\"forecast-title\">WEATHER</h1>\r\n                <h4>{info.city}</h4>\r\n                {(info.weather==='Rain') && <div className=\"forecast forecast-rain\"></div>}\r\n                {(info.weather==='Clear') && <div className=\"forecast forecast-sunny\"></div>}\r\n                {(info.weather==='Thunderstorm') && <div className=\"forecast forecast-storm\"></div>}\r\n                {(info.weather==='Clouds') && <div className=\"forecast forecast-mist\"></div>}\r\n                <h1 className=\"forecast-title\">{info.currentTemp}<sup>oC</sup></h1>\r\n                <p>{info.weather}</p>\r\n                <p>{dateTime.toLocaleString('en-us', {hour: 'numeric', minute: 'numeric', hour12: true, timezone: 'utc' })}</p>\r\n            </div>        \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Forecast\r\n","import axios from 'axios'\r\nimport { useState, useEffect } from 'react'\r\n\r\nfunction useForecast() {\r\n\r\n    const [isLoading, setLoading] = useState(false)\r\n    const [error, setError] = useState()\r\n    const [info, setInfo] = useState([])\r\n    const [weatherData, setWeatherData] = useState()\r\n\r\n    const callApi = async (city) => {\r\n        setLoading(true)\r\n        await axios.get(`https://api.openweathermap.org/data/2.5/weather?q=${city}&appid=b17c52ecf93e5a256de3bf62785ce96f`)\r\n        .then(res => {setInfo({\r\n            city: res.data.name,\r\n            currentTemp: Math.round(res.data.main.temp - 273.15),\r\n            weather: res.data.weather[0].main,\r\n            timezone: res.data.timezone\r\n        })})\r\n        .catch(err => setError(err))\r\n        .finally(() => setLoading(false))\r\n    }\r\n\r\n    return { isLoading, info, error, callApi }\r\n}\r\n\r\nexport default useForecast","import React, { useState } from 'react'\r\nimport Background from './Background'\r\nimport WeatherBg from './WeatherBg'\r\nimport Loading from './Loading'\r\nimport Forecast from './Forecast'\r\nimport useForecast from '../hooks/useForecast'\r\n\r\nfunction WeatherApp() {\r\n\r\n    const [submit, setSubmit] = useState(false)\r\n    const [weatherData, setWeatherData] = useState()\r\n\r\n    const { isLoading, info, error, callApi } = useForecast()\r\n\r\n    const onSubmit = location => {\r\n        setSubmit(true)\r\n        callApi(location)\r\n    }\r\n\r\n    if(error)\r\n        return <h1>{error}</h1>\r\n\r\n    return (\r\n        <div className='container-app'>\r\n            { <Background info={info} />}\r\n            { <WeatherBg info={info} />}\r\n            {isLoading && <Loading />}\r\n            {!isLoading && <Forecast submitLocation={onSubmit} submitted={submit} info={info} />}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default WeatherApp\r\n","import React from 'react';\nimport './css/App.css';\nimport WeatherApp from './component/WeatherApp';\n\nfunction App() {\n  return (\n    <React.Fragment>\n      <WeatherApp />\n    </React.Fragment>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}